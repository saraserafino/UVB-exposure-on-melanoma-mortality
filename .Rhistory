# Packages
require(dplyr)
require(ggplot2)
# install.packages("vcfR")
require(vcfR)
install.packages("vcfR")
require(vcfR)
# Download, load and cancel data
download.file(VCF_url, "Set.06.WGS.merged_filtered.vcf",)
# Download, load and cancel data
download.file(VCF_url, "Set.06.WGS.merged_filtered.vcf",)
# VCF - Variant Calling Format - of a multi-region tumour (WGS ~80x median coverage)
VCF_url = "https://raw.githubusercontent.com/caravagnalab/CNAqc_datasets/main/MSeq_Set06/Mutations/Set.06.WGS.merged_filtered.vcf"
# Download, load and cancel data
download.file(VCF_url, "Set.06.WGS.merged_filtered.vcf",)
set6 = vcfR::read.vcfR("Set.06.WGS.merged_filtered.vcf")
file.remove("Set.06.WGS.merged_filtered.vcf")
set6 = vcfR::read.vcfR("Set.06.WGS.merged_filtered.vcf")
set6 = vcfR::read.vcfR("Set.06.WGS.merged_filtered.vcf")
# Packages
require(dplyr)
require(ggplot2)
# install.packages("vcfR")
require(vcfR)
# VCF - Variant Calling Format - of a multi-region tumour (WGS ~80x median coverage)
VCF_url = "https://raw.githubusercontent.com/caravagnalab/CNAqc_datasets/main/MSeq_Set06/Mutations/Set.06.WGS.merged_filtered.vcf"
# Download, load and cancel data
download.file(VCF_url, "Set.06.WGS.merged_filtered.vcf",)
set6 = vcfR::read.vcfR("Set.06.WGS.merged_filtered.vcf")
# VCF
print(set6)
# INFO fields
info_tidy = vcfR::extract_info_tidy(set6)
set6@meta %>% grep("FR,", ., value = T)
set6@meta %>% grep("TR,", ., value = T)
set6@meta %>% grep("NR,", ., value = T)
set6@meta %>% grep("NF,", ., value = T)
# Fixed fields (mutation coordinates, chr|from|ref|alt)
fix_tidy = set6@fix %>%
as_tibble %>%
rename(
chr = CHROM,#chromosome
from = POS,#position
ref = REF,
alt = ALT
) %>%
mutate(from = as.numeric(from), to = from + nchar(alt))
# Genotypes
geno_tidy = vcfR::extract_gt_tidy(set6) %>%
group_split(Indiv)
# Genotypes (gt)
geno_tidy = vcfR::extract_gt_tidy(set6) %>%
group_split(Indiv)
#we put together this informations
# Sample mutations in the CNAqc format
sample_mutations = lapply(
geno_tidy,
function(x)
{
bind_cols(info_tidy, fix_tidy) %>%
full_join(x, by = "Key") %>%
mutate(DP = as.numeric(gt_NR), NV = as.numeric(gt_NV)) %>%
mutate(VAF = NV / DP) %>%
select(chr, from, to, ref, alt, NV, DP, VAF, everything()) %>%
filter(!is.na(VAF), VAF > 0) # VAF > 0 in each sample
})
# Packages
require(dplyr)
require(ggplot2)
# install.packages("vcfR")
require(vcfR)
# VCF - Variant Calling Format - of a multi-region tumour (WGS ~80x median coverage)
VCF_url = "https://raw.githubusercontent.com/caravagnalab/CNAqc_datasets/main/MSeq_Set06/Mutations/Set.06.WGS.merged_filtered.vcf"
# Download, load and cancel data
download.file(VCF_url, "Set.06.WGS.merged_filtered.vcf",)
set6 = vcfR::read.vcfR("Set.06.WGS.merged_filtered.vcf")
set6@meta #in meta there are the rows describing
set6@fix #in fix there is the content of second part
# so content of all the rows describing the mutations
set6@git #genotype informations
# VCF
print(set6)
# INFO fields
info_tidy = vcfR::extract_info_tidy(set6)
set6@meta %>% grep("FR,", ., value = T) #it tells you what FR is
set6@meta %>% grep("TR,", ., value = T) #it tells you what TR is
set6@meta %>% grep("NR,", ., value = T)
set6@meta %>% grep("NF,", ., value = T)
# Fixed fields (mutation coordinates, chr|from|ref|alt)
fix_tidy = set6@fix %>%
as_tibble %>%
rename(
chr = CHROM,#chromosome
from = POS,#position
ref = REF,
alt = ALT
) %>%
mutate(from = as.numeric(from), to = from + nchar(alt))
# Genotypes (gt)
geno_tidy = vcfR::extract_gt_tidy(set6) %>%
group_split(Indiv)
#we put together this informations
# Sample mutations in the CNAqc format
sample_mutations = lapply(
geno_tidy,
function(x)
{
bind_cols(info_tidy, fix_tidy) %>%
full_join(x, by = "Key") %>%
mutate(DP = as.numeric(gt_NR), NV = as.numeric(gt_NV)) %>%
mutate(VAF = NV / DP) %>%
select(chr, from, to, ref, alt, NV, DP, VAF, everything()) %>%
filter(!is.na(VAF), VAF > 0) # VAF > 0 in each sample
})
# A list for all samples available
names(sample_mutations) = sapply(sample_mutations, function(x) x$Indiv[1])
sample_mutations = sample_mutations[!is.na(names(sample_mutations))]
install.packages("vcfR")
install.packages("vcfR")
install.packages("vcfR")
install.packages("vcfR")
iris;
# learn the dataset iris through a package for tree learning
rpart(iris);
find.package('rpart');
# learn the dataset iris through a package for tree learning
rpart(iris);
find.package('rpart');
# learn the dataset iris through a package for tree learning
rpart();
#find.package('rpart'); # already have it
library(rpart); # load it
# learn the dataset iris through a package for tree learning
rpart(iris);
predict();
predict(rpart(iris));
devtools::install_github("caravagnalab/biPOD")
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
check_cmdstan_toolchain()
install_cmdstan()
cmdstan_version()
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
library(rstan)
remove.packages(c("StanHeaders", "rstan"))
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library(rstan)
library("rstan") # observe startup messages
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library("rstan") # observe startup messages
y <- as.matrix(read.table('https://raw.github.com/wiki/stan-dev/rstan/rats.txt', header = TRUE))
x <- c(8, 15, 22, 29, 36)
xbar <- mean(x)
N <- nrow(y)
T <- ncol(y)
rats_fit <- stan(file='https://raw.githubusercontent.com/stan-dev/example-models/master/bugs_examples/vol1/rats/rats.stan', data = list(N=N, T=T, y=y, x=x, xbar=xbar))
View(rats_fit)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
arch <- ifelse(R.version$arch == "aarch64", "arm64", "x86_64")
cat(paste("\nCXX17FLAGS += -O3 -mtune=native -arch", arch, "-ftemplate-depth-256"),
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
library(rstan)
library(ggplot2)
library(rstanarm)
library(bayesplot)
library(tidyr) # for pivot_longer
library(dplyr) # for %>%
library(truncnorm) # for rnorm with minimum and maximum values
library(loo)
library(lubridate) # for simplifying working with dates
# Create custom palette because I want to distinguish well between nations and don't like the existing options
custom_palette <- c("#9F002E", "#B23AEE", "#FF50FF", "#FF7F00", "#FFB900", "#00EEEE", "#4EEE94","#458B00", "#4876FF")
# Load the dataset
#install.packages("mlmRev")
library(mlmRev)
data("Mmmec")
# Check for missing values
colSums(is.na(Mmmec))
# Summarize statistics about deaths and uvb overall
summary(Mmmec$deaths)
# 1st quantile = 8 means that 25% of the observations have less than 8 deaths
# 3rd quantile = 31 means that 75% of the observations have less than 31 deaths
summary(Mmmec$uvb)
# Only deaths
ggplot(Mmmec, aes(x = deaths)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
ggtitle("Distribution of Deaths")
ggsave(file="images/distribution_deaths.pdf", width=18,height=10.5)
View(Mmmec)
# Boxplots of deaths by nation
ggplot(Mmmec, aes(x = nation, y = deaths)) +
geom_boxplot(fill = custom_palette) +
ggtitle("Deaths across counties in nations")
ggsave(file="images/boxplot_deaths_by_nation.pdf", width=8,height=7)
library(rstan)
library(ggplot2)
library(rstanarm)
library(bayesplot)
library(tidyr) # for pivot_longer
library(dplyr) # for %>%
library(truncnorm) # for rnorm with minimum and maximum values
library(loo)
library(lubridate) # for simplifying working with dates
# Create custom palette because I want to distinguish well between nations and don't like the existing options
custom_palette <- c("#9F002E", "#B23AEE", "#FF50FF", "#FF7F00", "#FFB900", "#00EEEE", "#4EEE94","#458B00", "#4876FF")
# Load the dataset
#install.packages("mlmRev")
library(mlmRev)
data("Mmmec")
# Check for missing values
colSums(is.na(Mmmec))
# Summarize statistics about deaths and uvb overall
summary(Mmmec$deaths)
# 1st quantile = 8 means that 25% of the observations have less than 8 deaths
# 3rd quantile = 31 means that 75% of the observations have less than 31 deaths
summary(Mmmec$uvb)
# Only deaths
ggplot(Mmmec, aes(x = deaths)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
ggtitle("Distribution of Deaths")
ggsave(file="images/distribution_deaths.pdf", width=18,height=10.5)
setwd("~/Desktop/Bayesian Statistics/progetto/UVB-exposure-on-melanoma-mortality")
